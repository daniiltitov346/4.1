#include <iostream>
#include "vector.h"
#include <cstdlib>    
#include <ctime>      
#include <limits>     


bool contains(const Vector& vec, int value) {
    for (size_t i = 0; i < vec.size(); ++i) {
        if (vec[i] == value) {
            return true;
        }
    }
    return false;
}

void sort_vector(Vector& vec) {
    for (size_t i = 0; i < vec.size() - 1; ++i) {
        for (size_t j = 0; j < vec.size() - i - 1; ++j) {
            if (vec[j] > vec[j + 1]) {
                int temp = vec[j];
                vec[j] = vec[j + 1];
                vec[j + 1] = temp;
            }
        }
    }
}

void process_sequence() {
    const int MAX_VALUE = 10000000;
    char choice;
    long long n;

    std::cout << "Choose method ('u' - user input, 'r' - random): ";
    std::cin >> choice;

    std::cout << "Enter count of numbers: ";
    std::cin >> n;

    if (n <= 0) {
        std::cout << "Invalid count!" << std::endl;
        return;
    }

    Vector numbers;
    numbers.resize(0); 

    if (choice == 'u') {
        std::cout << "Enter numbers (0 to " << MAX_VALUE << "):" << std::endl;
        for (long long i = 0; i < n; ++i) {
            int num;
            if (std::cin >> num) {
                if (num >= 0 && num <= MAX_VALUE) {
                    if (!contains(numbers, num)) {
                        numbers.resize(numbers.size() + 1);
                        numbers[numbers.size() - 1] = num;
                    }
                }
                else {
                    std::cout << "Number out of range! Skipped." << std::endl;
                }
            }
            else {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Invalid input! Skipped." << std::endl;
            }
        }
    }
    else if (choice == 'r') {
        std::srand(std::time(nullptr));
        for (long long i = 0; i < n; ++i) {
            int num = std::rand() % (MAX_VALUE + 1);
            if (!contains(numbers, num)) {
                numbers.resize(numbers.size() + 1);
                numbers[numbers.size() - 1] = num;
            }
        }
    }
    else {
        std::cout << "Invalid choice!" << std::endl;
        return;
    }

    sort_vector(numbers);

    std::cout << "Unique numbers in ascending order: ";
    if (numbers.size() == 0) {
        std::cout << "No numbers were added.";
    }
    else {
        for (size_t i = 0; i < numbers.size(); ++i) {
            std::cout << numbers[i] << " ";
        }
    }
    std::cout << std::endl;
}

int main() {
    process_sequence();
    return 0;
}
